#!/usr/bin/env python3
"""
FastMCP Echo Server Example

This is a comprehensive MCP server using FastMCP that provides tools, prompts, and resources.
It demonstrates the full MCP protocol capabilities with SSE transport.

To run this server:
1. Install FastMCP: pip install fastmcp
2. Run the server: python echo_server.py
3. The server will start on http://localhost:8000

The server provides:
- Tools: echo, reverse, uppercase, count_words
- Prompts: greeting, code_review, documentation
- Resources: README.md, config.json, data.txt, image.png
- SSE transport for real-time communication
- Compatible with the Ruby MCP client
"""

from fastmcp import FastMCP
import base64
from datetime import datetime

# Create the MCP server instance
mcp = FastMCP("Enhanced Echo Server")

@mcp.tool()
def echo(message: str) -> str:
    """Echo back the provided message"""
    return message

@mcp.tool()
def reverse(text: str) -> str:
    """Reverse the provided text"""
    return text[::-1]

@mcp.tool()
def uppercase(text: str) -> str:
    """Convert text to uppercase"""
    return text.upper()

@mcp.tool()
def count_words(text: str) -> dict:
    """Count words in the provided text"""
    words = text.split()
    return {
        "word_count": len(words),
        "character_count": len(text),
        "character_count_no_spaces": len(text.replace(" ", ""))
    }

# Prompts
@mcp.prompt()
def greeting(name: str) -> str:
    """Generate a personalized greeting message"""
    return f"Hello {name}! Welcome to the Enhanced FastMCP Echo Server. This server demonstrates the full capabilities of the MCP protocol including tools, prompts, and resources. How can I assist you today?"

@mcp.prompt()
def code_review(code: str, language: str = "unknown") -> str:
    """Generate code review comments"""
    return f"""Code Review for {language.title()} Code:

```{language}
{code}
```

Analysis:
- The code appears to be written in {language}
- Consider adding error handling for edge cases
- Documentation could be improved
- Consider performance optimizations if this is performance-critical
- Ensure proper input validation

Note: This is a demonstration review from the FastMCP Echo Server."""

@mcp.prompt()
def documentation(topic: str, audience: str = "general audience") -> str:
    """Generate documentation for a topic"""
    return f"""# {topic}

## Overview

This documentation is generated for {audience} and covers the topic: {topic}.

## Introduction

{topic} is an important concept that requires proper understanding and implementation.

## Key Points

- Understanding the fundamentals is crucial
- Best practices should be followed
- Regular updates and maintenance are important
- Documentation should be kept current

## Conclusion

This documentation provides a basic overview of {topic} tailored for {audience}. For more detailed information, please consult additional resources or contact support.

---
*Generated by FastMCP Echo Server*"""

# Resources
@mcp.resource("file:///sample/README.md")
def sample_readme() -> str:
    """Sample project README file"""
    return """# Sample Project README

This is a sample README file from the Enhanced FastMCP Echo Server.

## Features

- **Tools**: Echo, reverse, uppercase, count_words
- **Prompts**: Greeting, code_review, documentation
- **Resources**: README.md, config.json, data.txt, image.png
- **Transport**: Server-Sent Events for real-time communication

## Usage

This server demonstrates the complete MCP protocol capabilities.

## Getting Started

1. Start the server: `python echo_server.py`
2. Connect with a compatible MCP client
3. Explore tools, prompts, and resources

## Protocol Support

- JSON-RPC 2.0 over HTTP
- Server-Sent Events for streaming
- Tools, Prompts, and Resources

Generated by FastMCP Echo Server
"""

@mcp.resource("file:///sample/config.json")
def sample_config() -> dict:
    """Sample configuration file"""
    return {
        "server": {
            "name": "Enhanced FastMCP Echo Server",
            "version": "1.0.0",
            "protocol": "MCP",
            "transport": "sse"
        },
        "features": {
            "tools": True,
            "prompts": True,
            "resources": True,
            "streaming": True
        },
        "endpoints": {
            "sse": "/sse",
            "messages": "/messages"
        },
        "timeouts": {
            "read_timeout": 30,
            "connection_timeout": 10
        }
    }

@mcp.resource("file:///sample/data.txt")
def sample_data() -> str:
    """Plain text data with annotations"""
    return f"""This is sample text data from the FastMCP Echo Server.

Line 1: Hello from the Enhanced FastMCP Server!
Line 2: This server supports tools, prompts, and resources.
Line 3: FastMCP provides an easy way to build MCP servers.
Line 4: The SSE transport enables real-time communication.
Line 5: JSON-RPC 2.0 is used for the protocol layer.

Metadata:
- Created: {datetime.now().isoformat()}
- Server: Enhanced FastMCP Echo Server v1.0.0
- Protocol: MCP with FastMCP
- Transport: Server-Sent Events

End of sample data."""

@mcp.resource("file:///sample/image.png")
def sample_image() -> bytes:
    """Sample binary image resource"""
    # Create a simple base64 encoded "image" (just sample binary data)
    sample_binary = b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\tpHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\nIDATx\x9cc```\x00\x00\x00\x02\x00\x01H\xaf\xa4q\x00\x00\x00\x00IEND\xaeB`\x82"
    return sample_binary

if __name__ == "__main__":
    print("ðŸš€ Enhanced FastMCP Echo Server")
    print("=" * 40)
    print("Server will be available at: http://127.0.0.1:8000")
    print("SSE endpoint: http://127.0.0.1:8000/sse")
    print("JSON-RPC endpoint: http://127.0.0.1:8000/messages")
    print("\nFeatures:")
    print("âœ… Tools support")
    print("âœ… Prompts support")
    print("âœ… Resources support")
    print("âœ… SSE transport")
    print("\nAvailable tools:")
    print("  - echo: Echo back a message")
    print("  - reverse: Reverse text")
    print("  - uppercase: Convert to uppercase")
    print("  - count_words: Count words and characters")
    print("\nAvailable prompts:")
    print("  - greeting: Generate personalized greetings")
    print("  - code_review: Generate code review comments")
    print("  - documentation: Generate documentation")
    print("\nAvailable resources:")
    print("  - file:///sample/README.md: Sample README file")
    print("  - file:///sample/config.json: Configuration data")
    print("  - file:///sample/data.txt: Sample text data")
    print("  - file:///sample/image.png: Sample binary image")
    print("\nPress Ctrl+C to stop the server")
    print("-" * 40)

    mcp.run(transport="sse", host="127.0.0.1", port=8000)